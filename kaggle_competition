{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"kaggle_competition","provenance":[],"authorship_tag":"ABX9TyNz70pgDQ9zKrPlKkJy5rP5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iTVXen7V3gAh","executionInfo":{"status":"ok","timestamp":1636995781282,"user_tz":420,"elapsed":124,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"ec1346cf-2256-4813-c72a-e400dc9f1056"},"source":["import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","%cd '/content/gdrive/My Drive/Econ 484/datasets'"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","/content/gdrive/My Drive/Econ 484/datasets\n"]}]},{"cell_type":"markdown","metadata":{"id":"eqbShv4AXYU_"},"source":["**1. Obtain a Labeled Dataset**\n","\n","Here I read in the data, then split it into train and test features, and a vector of outcomes.\n","\n","The purpose of this project is to predict log housing price based on the variables available in the data set. I will clean the data and test a few models to get the best prediction of prices."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hx6mwv2c37u8","executionInfo":{"status":"ok","timestamp":1636996699065,"user_tz":420,"elapsed":123,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"13333d8e-1b19-4e5e-b19c-d33d27282341"},"source":["#import test and training data\n","train=pd.read_csv(\"train.csv\", index_col=False)\n","test=pd.read_csv(\"test.csv\", index_col=False)\n","print(train.columns)\n","print(test.columns)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n","       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n","       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n","       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n","       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n","       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n","       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n","       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n","       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n","       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n","       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n","       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n","       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n","       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n","       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n","       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n","       'SaleCondition', 'SalePrice'],\n","      dtype='object')\n","Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n","       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n","       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n","       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n","       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n","       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n","       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n","       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n","       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n","       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n","       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n","       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n","       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n","       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n","       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n","       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n","       'SaleCondition'],\n","      dtype='object')\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"GzODMeSjiaJz","executionInfo":{"status":"ok","timestamp":1636996702354,"user_tz":420,"elapsed":289,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"31187f06-14e5-4b0e-fe57-7047ead2a5f1"},"source":["#Do a little data exploration\n","train.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>MSSubClass</th>\n","      <th>LotFrontage</th>\n","      <th>LotArea</th>\n","      <th>OverallQual</th>\n","      <th>OverallCond</th>\n","      <th>YearBuilt</th>\n","      <th>YearRemodAdd</th>\n","      <th>MasVnrArea</th>\n","      <th>BsmtFinSF1</th>\n","      <th>BsmtFinSF2</th>\n","      <th>BsmtUnfSF</th>\n","      <th>TotalBsmtSF</th>\n","      <th>1stFlrSF</th>\n","      <th>2ndFlrSF</th>\n","      <th>LowQualFinSF</th>\n","      <th>GrLivArea</th>\n","      <th>BsmtFullBath</th>\n","      <th>BsmtHalfBath</th>\n","      <th>FullBath</th>\n","      <th>HalfBath</th>\n","      <th>BedroomAbvGr</th>\n","      <th>KitchenAbvGr</th>\n","      <th>TotRmsAbvGrd</th>\n","      <th>Fireplaces</th>\n","      <th>GarageYrBlt</th>\n","      <th>GarageCars</th>\n","      <th>GarageArea</th>\n","      <th>WoodDeckSF</th>\n","      <th>OpenPorchSF</th>\n","      <th>EnclosedPorch</th>\n","      <th>3SsnPorch</th>\n","      <th>ScreenPorch</th>\n","      <th>PoolArea</th>\n","      <th>MiscVal</th>\n","      <th>MoSold</th>\n","      <th>YrSold</th>\n","      <th>SalePrice</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1201.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1452.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1379.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","      <td>1460.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>730.500000</td>\n","      <td>56.897260</td>\n","      <td>70.049958</td>\n","      <td>10516.828082</td>\n","      <td>6.099315</td>\n","      <td>5.575342</td>\n","      <td>1971.267808</td>\n","      <td>1984.865753</td>\n","      <td>103.685262</td>\n","      <td>443.639726</td>\n","      <td>46.549315</td>\n","      <td>567.240411</td>\n","      <td>1057.429452</td>\n","      <td>1162.626712</td>\n","      <td>346.992466</td>\n","      <td>5.844521</td>\n","      <td>1515.463699</td>\n","      <td>0.425342</td>\n","      <td>0.057534</td>\n","      <td>1.565068</td>\n","      <td>0.382877</td>\n","      <td>2.866438</td>\n","      <td>1.046575</td>\n","      <td>6.517808</td>\n","      <td>0.613014</td>\n","      <td>1978.506164</td>\n","      <td>1.767123</td>\n","      <td>472.980137</td>\n","      <td>94.244521</td>\n","      <td>46.660274</td>\n","      <td>21.954110</td>\n","      <td>3.409589</td>\n","      <td>15.060959</td>\n","      <td>2.758904</td>\n","      <td>43.489041</td>\n","      <td>6.321918</td>\n","      <td>2007.815753</td>\n","      <td>180921.195890</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>421.610009</td>\n","      <td>42.300571</td>\n","      <td>24.284752</td>\n","      <td>9981.264932</td>\n","      <td>1.382997</td>\n","      <td>1.112799</td>\n","      <td>30.202904</td>\n","      <td>20.645407</td>\n","      <td>181.066207</td>\n","      <td>456.098091</td>\n","      <td>161.319273</td>\n","      <td>441.866955</td>\n","      <td>438.705324</td>\n","      <td>386.587738</td>\n","      <td>436.528436</td>\n","      <td>48.623081</td>\n","      <td>525.480383</td>\n","      <td>0.518911</td>\n","      <td>0.238753</td>\n","      <td>0.550916</td>\n","      <td>0.502885</td>\n","      <td>0.815778</td>\n","      <td>0.220338</td>\n","      <td>1.625393</td>\n","      <td>0.644666</td>\n","      <td>24.689725</td>\n","      <td>0.747315</td>\n","      <td>213.804841</td>\n","      <td>125.338794</td>\n","      <td>66.256028</td>\n","      <td>61.119149</td>\n","      <td>29.317331</td>\n","      <td>55.757415</td>\n","      <td>40.177307</td>\n","      <td>496.123024</td>\n","      <td>2.703626</td>\n","      <td>1.328095</td>\n","      <td>79442.502883</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>20.000000</td>\n","      <td>21.000000</td>\n","      <td>1300.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>1872.000000</td>\n","      <td>1950.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>334.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>334.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>1900.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>2006.000000</td>\n","      <td>34900.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>365.750000</td>\n","      <td>20.000000</td>\n","      <td>59.000000</td>\n","      <td>7553.500000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>1954.000000</td>\n","      <td>1967.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>223.000000</td>\n","      <td>795.750000</td>\n","      <td>882.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1129.500000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>5.000000</td>\n","      <td>0.000000</td>\n","      <td>1961.000000</td>\n","      <td>1.000000</td>\n","      <td>334.500000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>5.000000</td>\n","      <td>2007.000000</td>\n","      <td>129975.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>730.500000</td>\n","      <td>50.000000</td>\n","      <td>69.000000</td>\n","      <td>9478.500000</td>\n","      <td>6.000000</td>\n","      <td>5.000000</td>\n","      <td>1973.000000</td>\n","      <td>1994.000000</td>\n","      <td>0.000000</td>\n","      <td>383.500000</td>\n","      <td>0.000000</td>\n","      <td>477.500000</td>\n","      <td>991.500000</td>\n","      <td>1087.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1464.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>6.000000</td>\n","      <td>1.000000</td>\n","      <td>1980.000000</td>\n","      <td>2.000000</td>\n","      <td>480.000000</td>\n","      <td>0.000000</td>\n","      <td>25.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>2008.000000</td>\n","      <td>163000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1095.250000</td>\n","      <td>70.000000</td>\n","      <td>80.000000</td>\n","      <td>11601.500000</td>\n","      <td>7.000000</td>\n","      <td>6.000000</td>\n","      <td>2000.000000</td>\n","      <td>2004.000000</td>\n","      <td>166.000000</td>\n","      <td>712.250000</td>\n","      <td>0.000000</td>\n","      <td>808.000000</td>\n","      <td>1298.250000</td>\n","      <td>1391.250000</td>\n","      <td>728.000000</td>\n","      <td>0.000000</td>\n","      <td>1776.750000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>7.000000</td>\n","      <td>1.000000</td>\n","      <td>2002.000000</td>\n","      <td>2.000000</td>\n","      <td>576.000000</td>\n","      <td>168.000000</td>\n","      <td>68.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>8.000000</td>\n","      <td>2009.000000</td>\n","      <td>214000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1460.000000</td>\n","      <td>190.000000</td>\n","      <td>313.000000</td>\n","      <td>215245.000000</td>\n","      <td>10.000000</td>\n","      <td>9.000000</td>\n","      <td>2010.000000</td>\n","      <td>2010.000000</td>\n","      <td>1600.000000</td>\n","      <td>5644.000000</td>\n","      <td>1474.000000</td>\n","      <td>2336.000000</td>\n","      <td>6110.000000</td>\n","      <td>4692.000000</td>\n","      <td>2065.000000</td>\n","      <td>572.000000</td>\n","      <td>5642.000000</td>\n","      <td>3.000000</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>2.000000</td>\n","      <td>8.000000</td>\n","      <td>3.000000</td>\n","      <td>14.000000</td>\n","      <td>3.000000</td>\n","      <td>2010.000000</td>\n","      <td>4.000000</td>\n","      <td>1418.000000</td>\n","      <td>857.000000</td>\n","      <td>547.000000</td>\n","      <td>552.000000</td>\n","      <td>508.000000</td>\n","      <td>480.000000</td>\n","      <td>738.000000</td>\n","      <td>15500.000000</td>\n","      <td>12.000000</td>\n","      <td>2010.000000</td>\n","      <td>755000.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Id   MSSubClass  ...       YrSold      SalePrice\n","count  1460.000000  1460.000000  ...  1460.000000    1460.000000\n","mean    730.500000    56.897260  ...  2007.815753  180921.195890\n","std     421.610009    42.300571  ...     1.328095   79442.502883\n","min       1.000000    20.000000  ...  2006.000000   34900.000000\n","25%     365.750000    20.000000  ...  2007.000000  129975.000000\n","50%     730.500000    50.000000  ...  2008.000000  163000.000000\n","75%    1095.250000    70.000000  ...  2009.000000  214000.000000\n","max    1460.000000   190.000000  ...  2010.000000  755000.000000\n","\n","[8 rows x 38 columns]"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"id":"yQGZIgySikro","executionInfo":{"status":"ok","timestamp":1636996704967,"user_tz":420,"elapsed":567,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"6609051d-96b1-4059-83c0-83bc6314fb0c"},"source":["\n","ax = sns.displot(train[\"SalePrice\"])\n","plt.title(\"Distribution of Housing Prices in the Train Set\")\n","plt.xlabel(\"House Selling Prices\")\n","plt.ylabel(\"Frequency\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(3.549999999999997, 0.5, 'Frequency')"]},"metadata":{},"execution_count":44},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"e4zNTv5-ivFg","executionInfo":{"status":"ok","timestamp":1636996707619,"user_tz":420,"elapsed":162,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"d2a47932-6aba-47c9-a72c-cd4db2151540"},"source":["print(\"This is the correlation between SalePrice and all the other variables: \" + \"\\n\")\n","corr = train.corr()\n","corr[[\"SalePrice\"]].sort_values(by=\"SalePrice\",ascending=True)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the correlation between SalePrice and all the other variables: \n","\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SalePrice</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>KitchenAbvGr</th>\n","      <td>-0.135907</td>\n","    </tr>\n","    <tr>\n","      <th>EnclosedPorch</th>\n","      <td>-0.128578</td>\n","    </tr>\n","    <tr>\n","      <th>MSSubClass</th>\n","      <td>-0.084284</td>\n","    </tr>\n","    <tr>\n","      <th>OverallCond</th>\n","      <td>-0.077856</td>\n","    </tr>\n","    <tr>\n","      <th>YrSold</th>\n","      <td>-0.028923</td>\n","    </tr>\n","    <tr>\n","      <th>LowQualFinSF</th>\n","      <td>-0.025606</td>\n","    </tr>\n","    <tr>\n","      <th>Id</th>\n","      <td>-0.021917</td>\n","    </tr>\n","    <tr>\n","      <th>MiscVal</th>\n","      <td>-0.021190</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtHalfBath</th>\n","      <td>-0.016844</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtFinSF2</th>\n","      <td>-0.011378</td>\n","    </tr>\n","    <tr>\n","      <th>3SsnPorch</th>\n","      <td>0.044584</td>\n","    </tr>\n","    <tr>\n","      <th>MoSold</th>\n","      <td>0.046432</td>\n","    </tr>\n","    <tr>\n","      <th>PoolArea</th>\n","      <td>0.092404</td>\n","    </tr>\n","    <tr>\n","      <th>ScreenPorch</th>\n","      <td>0.111447</td>\n","    </tr>\n","    <tr>\n","      <th>BedroomAbvGr</th>\n","      <td>0.168213</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtUnfSF</th>\n","      <td>0.214479</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtFullBath</th>\n","      <td>0.227122</td>\n","    </tr>\n","    <tr>\n","      <th>LotArea</th>\n","      <td>0.263843</td>\n","    </tr>\n","    <tr>\n","      <th>HalfBath</th>\n","      <td>0.284108</td>\n","    </tr>\n","    <tr>\n","      <th>OpenPorchSF</th>\n","      <td>0.315856</td>\n","    </tr>\n","    <tr>\n","      <th>2ndFlrSF</th>\n","      <td>0.319334</td>\n","    </tr>\n","    <tr>\n","      <th>WoodDeckSF</th>\n","      <td>0.324413</td>\n","    </tr>\n","    <tr>\n","      <th>LotFrontage</th>\n","      <td>0.351799</td>\n","    </tr>\n","    <tr>\n","      <th>BsmtFinSF1</th>\n","      <td>0.386420</td>\n","    </tr>\n","    <tr>\n","      <th>Fireplaces</th>\n","      <td>0.466929</td>\n","    </tr>\n","    <tr>\n","      <th>MasVnrArea</th>\n","      <td>0.477493</td>\n","    </tr>\n","    <tr>\n","      <th>GarageYrBlt</th>\n","      <td>0.486362</td>\n","    </tr>\n","    <tr>\n","      <th>YearRemodAdd</th>\n","      <td>0.507101</td>\n","    </tr>\n","    <tr>\n","      <th>YearBuilt</th>\n","      <td>0.522897</td>\n","    </tr>\n","    <tr>\n","      <th>TotRmsAbvGrd</th>\n","      <td>0.533723</td>\n","    </tr>\n","    <tr>\n","      <th>FullBath</th>\n","      <td>0.560664</td>\n","    </tr>\n","    <tr>\n","      <th>1stFlrSF</th>\n","      <td>0.605852</td>\n","    </tr>\n","    <tr>\n","      <th>TotalBsmtSF</th>\n","      <td>0.613581</td>\n","    </tr>\n","    <tr>\n","      <th>GarageArea</th>\n","      <td>0.623431</td>\n","    </tr>\n","    <tr>\n","      <th>GarageCars</th>\n","      <td>0.640409</td>\n","    </tr>\n","    <tr>\n","      <th>GrLivArea</th>\n","      <td>0.708624</td>\n","    </tr>\n","    <tr>\n","      <th>OverallQual</th>\n","      <td>0.790982</td>\n","    </tr>\n","    <tr>\n","      <th>SalePrice</th>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               SalePrice\n","KitchenAbvGr   -0.135907\n","EnclosedPorch  -0.128578\n","MSSubClass     -0.084284\n","OverallCond    -0.077856\n","YrSold         -0.028923\n","LowQualFinSF   -0.025606\n","Id             -0.021917\n","MiscVal        -0.021190\n","BsmtHalfBath   -0.016844\n","BsmtFinSF2     -0.011378\n","3SsnPorch       0.044584\n","MoSold          0.046432\n","PoolArea        0.092404\n","ScreenPorch     0.111447\n","BedroomAbvGr    0.168213\n","BsmtUnfSF       0.214479\n","BsmtFullBath    0.227122\n","LotArea         0.263843\n","HalfBath        0.284108\n","OpenPorchSF     0.315856\n","2ndFlrSF        0.319334\n","WoodDeckSF      0.324413\n","LotFrontage     0.351799\n","BsmtFinSF1      0.386420\n","Fireplaces      0.466929\n","MasVnrArea      0.477493\n","GarageYrBlt     0.486362\n","YearRemodAdd    0.507101\n","YearBuilt       0.522897\n","TotRmsAbvGrd    0.533723\n","FullBath        0.560664\n","1stFlrSF        0.605852\n","TotalBsmtSF     0.613581\n","GarageArea      0.623431\n","GarageCars      0.640409\n","GrLivArea       0.708624\n","OverallQual     0.790982\n","SalePrice       1.000000"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"CStSwoH9i-18","executionInfo":{"status":"ok","timestamp":1636996711713,"user_tz":420,"elapsed":440,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"951c8310-6877-4d60-ec25-b05319473590"},"source":["sns.scatterplot(data=train, x=\"OverallQual\", y=\"SalePrice\")\n","plt.title(\"Correlation between SalePrice and OverallQual\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Correlation between SalePrice and OverallQual')"]},"metadata":{},"execution_count":46},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"-Oukf-xUrXXW"},"source":["OverallQuall is the most significant correlation so I plotted it to see more information on it."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vYtXmkfe4G4B","executionInfo":{"status":"ok","timestamp":1636996714772,"user_tz":420,"elapsed":315,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"40760c8f-0d69-408e-e85c-a8ed0967d0d3"},"source":["#get data separated into x and y\n","\n","train=train.drop(['Id'], axis=1)\n","test=test.drop(['Id'], axis=1)\n","\n","train = train[train.GrLivArea < 4500]\n","train.reset_index(drop=True, inplace=True)\n","train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n","y = train['SalePrice'].reset_index(drop=True)\n","train_features = train.drop(['SalePrice'], axis=1)\n","test_features = test\n","\n","print(test_features.head())\n","print(train_features.head())\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   MSSubClass MSZoning  LotFrontage  ...  YrSold SaleType SaleCondition\n","0          20       RH         80.0  ...    2010       WD        Normal\n","1          20       RL         81.0  ...    2010       WD        Normal\n","2          60       RL         74.0  ...    2010       WD        Normal\n","3          60       RL         78.0  ...    2010       WD        Normal\n","4         120       RL         43.0  ...    2010       WD        Normal\n","\n","[5 rows x 79 columns]\n","   MSSubClass MSZoning  LotFrontage  ...  YrSold SaleType SaleCondition\n","0          60       RL         65.0  ...    2008       WD        Normal\n","1          20       RL         80.0  ...    2007       WD        Normal\n","2          60       RL         68.0  ...    2008       WD        Normal\n","3          70       RL         60.0  ...    2006       WD       Abnorml\n","4          60       RL         84.0  ...    2008       WD        Normal\n","\n","[5 rows x 79 columns]\n"]}]},{"cell_type":"markdown","metadata":{"id":"3hjE-VFtXvRI"},"source":["**2. Wrangle and Clean Dataset**\n","\n","Next I remove NA values and replace them with a zero, 'None', or the mode value or median based on what kind of variable it is. I also make the data types consistent and create dummy variables for categorical variables. \n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6sJHokBR6_1T","executionInfo":{"status":"ok","timestamp":1636996717565,"user_tz":420,"elapsed":329,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"6a425ff7-8139-4c8e-eb88-59e64cd0cec6"},"source":["#take care of na values, impute data\n","for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n","    train_features[col] = train_features[col].fillna(0)\n","    test_features[col] = test_features[col].fillna(0)\n","\n","for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n","    train_features[col] = train_features[col].fillna('None')\n","    test_features[col] = test_features[col].fillna('None')\n","\n","for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n","    train_features[col] = train_features[col].fillna('None')\n","    test_features[col] = test_features[col].fillna('None')\n","\n","train_features['MSZoning'] = train_features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n","test_features['MSZoning'] = test_features.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n","\n","print(train_features.head())\n","print(test_features.head())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   MSSubClass MSZoning  LotFrontage  ...  YrSold SaleType SaleCondition\n","0          60       RL         65.0  ...    2008       WD        Normal\n","1          20       RL         80.0  ...    2007       WD        Normal\n","2          60       RL         68.0  ...    2008       WD        Normal\n","3          70       RL         60.0  ...    2006       WD       Abnorml\n","4          60       RL         84.0  ...    2008       WD        Normal\n","\n","[5 rows x 79 columns]\n","   MSSubClass MSZoning  LotFrontage  ...  YrSold SaleType SaleCondition\n","0          20       RH         80.0  ...    2010       WD        Normal\n","1          20       RL         81.0  ...    2010       WD        Normal\n","2          60       RL         74.0  ...    2010       WD        Normal\n","3          60       RL         78.0  ...    2010       WD        Normal\n","4         120       RL         43.0  ...    2010       WD        Normal\n","\n","[5 rows x 79 columns]\n"]}]},{"cell_type":"code","metadata":{"id":"lAsDctqLEXc7"},"source":["objects = []\n","for i in test_features.columns:\n","    if test_features[i].dtype == object:\n","        objects.append(i)\n","test_features.update(test_features[objects].fillna('None'))\n","\n","test_features['LotFrontage'] = test_features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n","\n","numeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n","numerics = []\n","for i in test_features.columns:\n","    if test_features[i].dtype in numeric_dtypes:\n","        numerics.append(i)\n","test_features.update(test_features[numerics].fillna(0))\n","\n","objects2 = []\n","for i in train_features.columns:\n","    if train_features[i].dtype == object:\n","        objects2.append(i)\n","train_features.update(train_features[objects2].fillna('None'))\n","\n","train_features['LotFrontage'] = train_features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n","\n","numerics2 = []\n","for i in train_features.columns:\n","    if train_features[i].dtype in numeric_dtypes:\n","        numerics2.append(i)\n","train_features.update(train_features[numerics2].fillna(0))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kbWiXN_-4lwl"},"source":["test_features = test_features.drop(['Utilities', 'Street', 'PoolQC',], axis=1)\n","\n","test_features['YrBltAndRemod']=test_features['YearBuilt']+test_features['YearRemodAdd']\n","test_features['TotalSF']=test_features['TotalBsmtSF'] + test_features['1stFlrSF'] + test_features['2ndFlrSF']\n","\n","test_features['Total_sqr_footage'] = (test_features['BsmtFinSF1'] + test_features['BsmtFinSF2'] +\n","                                 test_features['1stFlrSF'] + test_features['2ndFlrSF'])\n","\n","test_features['Total_Bathrooms'] = (test_features['FullBath'] + (0.5 * test_features['HalfBath']) +\n","                               test_features['BsmtFullBath'] + (0.5 * test_features['BsmtHalfBath']))\n","\n","test_features['Total_porch_sf'] = (test_features['OpenPorchSF'] + test_features['3SsnPorch'] +\n","                              test_features['EnclosedPorch'] + test_features['ScreenPorch'] +\n","                              test_features['WoodDeckSF'])\n","\n","\n","\n","train_features = train_features.drop(['Utilities', 'Street', 'PoolQC',], axis=1)\n","\n","train_features['YrBltAndRemod']=train_features['YearBuilt']+train_features['YearRemodAdd']\n","train_features['TotalSF']=train_features['TotalBsmtSF'] + train_features['1stFlrSF'] + train_features['2ndFlrSF']\n","\n","train_features['Total_sqr_footage'] = (train_features['BsmtFinSF1'] + train_features['BsmtFinSF2'] +\n","                                 train_features['1stFlrSF'] + train_features['2ndFlrSF'])\n","\n","train_features['Total_Bathrooms'] = (train_features['FullBath'] + (0.5 * train_features['HalfBath']) +\n","                               train_features['BsmtFullBath'] + (0.5 * train_features['BsmtHalfBath']))\n","\n","train_features['Total_porch_sf'] = (train_features['OpenPorchSF'] + train_features['3SsnPorch'] +\n","                              train_features['EnclosedPorch'] + train_features['ScreenPorch'] +\n","                              train_features['WoodDeckSF'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qP9JoNpF5jLa"},"source":["test_features['haspool'] = test_features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n","test_features['has2ndfloor'] = test_features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n","test_features['hasgarage'] = test_features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n","test_features['hasbsmt'] = test_features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n","test_features['hasfireplace'] = test_features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n","\n","\n","train_features['haspool'] = train_features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n","train_features['has2ndfloor'] = train_features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n","train_features['hasgarage'] = train_features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n","train_features['hasbsmt'] = train_features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n","train_features['hasfireplace'] = train_features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w9BuEbwE6DNv","executionInfo":{"status":"ok","timestamp":1636996727677,"user_tz":420,"elapsed":334,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"c5d3ec9b-f55c-4fa5-d3bc-65d5240fae3e"},"source":["final_test_features = pd.get_dummies(test_features).reset_index(drop=True)\n","print(final_test_features.shape)\n","\n","final_train_features = pd.get_dummies(train_features).reset_index(drop=True)\n","print(final_train_features.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1459, 293)\n","(1458, 304)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yhg_mwGG6fW5","executionInfo":{"status":"ok","timestamp":1636996729465,"user_tz":420,"elapsed":118,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"a98d1de6-406f-4ca8-d86f-83f7a101ab37"},"source":["\n","\n","print([x for x in final_test_features.columns if x not in (final_train_features.columns)])\n","print([x for x in final_train_features.columns if x not in (final_test_features.columns)])\n","final_test_features=final_test_features.drop([x for x in final_test_features.columns if x not in (final_train_features.columns)],axis=1)\n","final_train_features=final_train_features.drop([x for x in final_train_features.columns if x not in (final_test_features.columns)],axis=1)\n","\n","print([x for x in final_test_features.columns if x not in (final_train_features.columns)])\n","print([x for x in final_train_features.columns if x not in (final_test_features.columns)])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Exterior1st_None', 'Exterior2nd_None', 'KitchenQual_None', 'Functional_None', 'SaleType_None']\n","['Condition2_RRAe', 'Condition2_RRAn', 'Condition2_RRNn', 'HouseStyle_2.5Fin', 'RoofMatl_Membran', 'RoofMatl_Metal', 'RoofMatl_Roll', 'Exterior1st_ImStucc', 'Exterior1st_Stone', 'Exterior2nd_Other', 'Heating_Floor', 'Heating_OthW', 'Electrical_Mix', 'Electrical_None', 'GarageQual_Ex', 'MiscFeature_TenC']\n","[]\n","[]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vf37KqgCSQxK","executionInfo":{"status":"ok","timestamp":1636996732686,"user_tz":420,"elapsed":381,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"b46ccf5f-70c2-444c-b97c-d1bf2a22c304"},"source":["print(final_test_features.shape)\n","print(final_train_features.shape)\n","print(y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1459, 288)\n","(1458, 288)\n","(1458,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"SuHJtvNSrl9e"},"source":["Now there are no more nan values, and features are clean and easier to work with. I'll move on to testing models."]},{"cell_type":"markdown","metadata":{"id":"IzXaWJKhYYu-"},"source":["**3. Divide Into Training and Test Sets**\n"]},{"cell_type":"code","metadata":{"id":"8-Am_5TJTzQo"},"source":["#train test split\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(final_train_features, y,\n","                                                    random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4ai6rvfsYiRI"},"source":["**4. Pick an Appropriate Method**\n","\n","In this case I Chose Random Forest as an ensemble regression prediction method.\n","\n","**5. Choose Regularization Parameters Through Cross Validation**\n","\n","I do a gridsearch cv to cross validate and select the best model\n","\n","**6. Fit Model on Entire Training Set Using Selected Parameters**\n","\n","I decided to use random forest and lasso to get a sense for how an ensemble method and a simpler regression method would compare."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HnxCOYH673_6","executionInfo":{"status":"ok","timestamp":1636996781558,"user_tz":420,"elapsed":44344,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"7e4e025b-d203-4911-9aaf-836fe46a3044"},"source":["#RandomForest get parameters from cross validation\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.model_selection import GridSearchCV\n","forest = RandomForestRegressor() #n_estimator is B\n","param_grid = {'max_depth' : [7,8,9],'min_samples_leaf' : [4,5]}\n","grid_search_rf = GridSearchCV(forest,param_grid,cv=5,return_train_score=True)\n","best_forest = grid_search_rf.fit(X_train,y_train)\n","print(best_forest.best_params_)\n","print(best_forest.best_score_)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'max_depth': 9, 'min_samples_leaf': 4}\n","0.8711702330742543\n"]}]},{"cell_type":"markdown","metadata":{"id":"JVX1TpfNZIag"},"source":["**7. Evaluate Model On the Test Set Finding MSE**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uLaEJ-C9VIpl","executionInfo":{"status":"ok","timestamp":1636996786299,"user_tz":420,"elapsed":123,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"319ad0e9-579a-4d28-ca6e-8160cd774f59"},"source":["#evaluate on test split data\n","from sklearn.metrics import mean_squared_error\n","rf_predict = best_forest.predict(X_test)\n","rf_mse = mean_squared_error(y_test, rf_predict)\n","print(rf_mse)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.01898664931829936\n"]}]},{"cell_type":"markdown","metadata":{"id":"4FgqgatHZXSE"},"source":["**8. Repeat Steps 4-7 For Several Methods**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ged9nSr88fG","executionInfo":{"status":"ok","timestamp":1636996812100,"user_tz":420,"elapsed":8416,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"765c67d2-d2f5-41e7-a739-4bb502554cd1"},"source":["#Lasso get parameters from cross validation\n","from sklearn import linear_model\n","lasso = linear_model.Lasso(max_iter=100000)\n","param_grid = {'alpha' : [.1,.2,.3,.4,.5,.6,.7,.8,.9],'fit_intercept' : [True,False]}\n","grid_search_lasso = GridSearchCV(lasso,param_grid,cv=5,return_train_score=True)\n","best_lasso = grid_search_lasso.fit(X_train,y_train)\n","print(best_lasso.best_params_)\n","print(best_lasso.best_score_)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'alpha': 0.1, 'fit_intercept': True}\n","0.8464282225985793\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"52qmfz_zc5Mp","executionInfo":{"status":"ok","timestamp":1636996815097,"user_tz":420,"elapsed":133,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"93a4a801-6b1f-4513-dd64-914bd43e4e45"},"source":["#evaluate on test split data\n","from sklearn.metrics import mean_squared_error\n","lasso_predict = best_lasso.predict(X_test)\n","lasso_mse = mean_squared_error(y_test, lasso_predict)\n","print(lasso_mse)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.027433787633101187\n"]}]},{"cell_type":"markdown","metadata":{"id":"Sg0Eac85aWbS"},"source":["**9. Evaluate On the Entire Data Set, Make Predictions for the 'test.csv'**\n","\n","The Random Forest Model was the best so I will print those out as my final predictions.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CPXmbXVHWqYv","executionInfo":{"status":"ok","timestamp":1636997686391,"user_tz":420,"elapsed":69759,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"c86a6e24-0fde-4efd-a841-3c012a423efa"},"source":["#refit on the whole training set\n","final_rf = grid_search_rf.fit(final_train_features,y)\n","final_lasso = grid_search_lasso.fit(final_train_features,y)\n","final_rf_predict = final_rf.predict(final_test_features)\n","final_lasso_predict = final_rf.predict(final_test_features)\n","#evaluate model on the test data and explain the results\n","#evaluate on test split data\n","final_predict = final_rf_predict\n","print(final_predict)\n","\n","#NOTE THESE ARE THE LOG PREDICTIONS so they should be interpreted as predictions of log sales price as stated in the evaluation step."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[11.76759341 12.00486055 12.07541374 ... 12.02893771 11.60612025\n"," 12.29284935]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0QIWcUJqog36","executionInfo":{"status":"ok","timestamp":1636997761962,"user_tz":420,"elapsed":300,"user":{"displayName":"Abe Burton","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01633280074345084238"}},"outputId":"911dcc56-d795-417d-f10b-16ff40cccd1c"},"source":["print(final_predict.shape)\n","print(final_test_features.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1459,)\n","(1459, 288)\n"]}]}]}